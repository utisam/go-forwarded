// Code generated by xfields.sh
// DO NOT EDIT!

package forwarded

import "strings"

type XField interface {
	len() int
	apply(*Element, int)
}

type xForwardedByField []string

func ForwardedBy(s string) XField {
	return xForwardedByField(strings.Split(s, ","))
}

func (xf xForwardedByField) len() int {
	return len(xf)
}

func (xf xForwardedByField) apply(elm *Element, i int) {
	elm.By = strings.TrimSpace(xf[i])
}

type xForwardedForField []string

func ForwardedFor(s string) XField {
	return xForwardedForField(strings.Split(s, ","))
}

func (xf xForwardedForField) len() int {
	return len(xf)
}

func (xf xForwardedForField) apply(elm *Element, i int) {
	elm.For = strings.TrimSpace(xf[i])
}

type xForwardedHostField []string

func ForwardedHost(s string) XField {
	return xForwardedHostField(strings.Split(s, ","))
}

func (xf xForwardedHostField) len() int {
	return len(xf)
}

func (xf xForwardedHostField) apply(elm *Element, i int) {
	elm.Host = strings.TrimSpace(xf[i])
}

type xForwardedProtoField []string

func ForwardedProto(s string) XField {
	return xForwardedProtoField(strings.Split(s, ","))
}

func (xf xForwardedProtoField) len() int {
	return len(xf)
}

func (xf xForwardedProtoField) apply(elm *Element, i int) {
	elm.Proto = strings.TrimSpace(xf[i])
}

type xRealIPField string

func RealIP(s string) XField {
	return xRealIPField(s)
}

func (xf xRealIPField) len() int {
	return 1
}

func (xf xRealIPField) apply(elm *Element, i int) {
	elm.For = strings.TrimSpace(string(xf))
}

type xRealHostField string

func RealHost(s string) XField {
	return xRealHostField(s)
}

func (xf xRealHostField) len() int {
	return 1
}

func (xf xRealHostField) apply(elm *Element, i int) {
	elm.Host = strings.TrimSpace(string(xf))
}
