#!/bin/sh

function print_x_forwarded_field() {
	declare -r K=$1

	cat <<EOS

type xForwarded${K}Field []string

func Forwarded${K}(s string) XField {
	return xForwarded${K}Field(strings.Split(s, ","))
}

func (xf xForwarded${K}Field) len() int {
	return len(xf)
}

func (xf xForwarded${K}Field) apply(elm *Element, i int) {
	elm.${K} = strings.TrimSpace(xf[i])
}
EOS
}

function print_x_real_field() {
	declare -r N=$1
	declare -r K=$2

	cat <<EOS

type xReal${N}Field string

func Real${N}(s string) XField {
	return xReal${N}Field(s)
}

func (xf xReal${N}Field) len() int {
	return 1
}

func (xf xReal${N}Field) apply(elm *Element, i int) {
	elm.${K} = strings.TrimSpace(string(xf))
}
EOS
}

function print_source() {
	cat <<EOS
// Code generated by xfields.sh
// DO NOT EDIT!

package forwarded

import "strings"

type XField interface {
	len() int
	apply(*Element, int)
}
EOS
	for K in "By" "For" "Host" "Proto"; do
		print_x_forwarded_field $K
	done
	print_x_real_field "IP" "For"
	print_x_real_field "Host" "Host"
}

cd $(dirname $0)
print_source > xfields.go
